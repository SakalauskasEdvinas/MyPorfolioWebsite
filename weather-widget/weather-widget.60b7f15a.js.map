{"mappings":"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","sources":["weather-widget/weather-widget-script.js"],"sourcesContent":["// Live at  - https://sakalauskasedvinas.github.io/MyPorfolioWebsite/weather-widget/weather-widget.html - work in progress, so something might be not up to date depending on time of visit -->\n// Implemented a weather widget using google's places api and openweathermap.\n// Google places api was used to create a dropdown of city suggestions as you type in a city's name.\n// Weather api to retrive the forecast for next 7 days.\nfunction updateWeather(lat, lng) {\n\n    const part = 'minutely';\n    const apiKey = 'eaee3002bb3eb97eda283a3017308de6';\n\n    const url = `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lng}&units=metric&exclude=${part}&appid=${apiKey}`;\n\n\n\n    function getWeekDay(dt) {\n        const language = 'en-us';\n        const options = {\n            weekday: 'long'\n        };\n        return new Date(dt * 1000).toLocaleString(language, options);\n\n\n    }\n\n\n\n    fetch(url)\n        .then(response => response.json())\n        .then(data => {\n            // Process the weather data here\n            console.log(data)\n            const {\n                alerts,\n                current,\n                daily,\n                hourly\n            } = data;\n            document.getElementById(\"swiper-wrapper\").innerHTML = \"\";\n\n\n            for (let day of daily) {\n                let date = new Date(day.dt * 1000);\n                let dateString = date.getDate().toString() + \"/\" + (date.getMonth() + 1).toString();\n                const {\n                    icon,\n                    description\n                } = day.weather[0];\n                const weatherCard = `\n            <div class=\"card\">\n            <img src=\"https://openweathermap.org/img/wn/${icon}@2x.png\"  alt=\"Weather Image\">\n            <div class=\"card-body\">\n                <h5 class=\"card-title fw-bolder\">${getWeekDay(day.dt)}</h5>\n                <h5 class=\"card-title fw-bolder\">${parseInt(day.temp.max)}°C</h5>\n\n                <p class=\"card-text fw-bold\">${dateString}</h5>\n                <p class=\"card-text fw-bolder\"><span class=\"capitalize h4\"> ${description}</span></p>\n                <p class=\"card-text fw-bolder\">Humidity: ${day.humidity}%</p>\n                <p class=\"card-text fw-bolder\">Feels Like: ${day.feels_like.day}°C</p>\n                <p class=\"card-text fw-bolder\">Wind Speed: ${day.wind_speed} m/s</p>\n                <p class=\"card-text fw-bolder\">Sunrise: ${new Date(day.sunrise*1000).getHours()}:${new Date(day.sunrise*1000).getMinutes().toString().padStart(2, \"0\")} AM</p>\n                <p class=\"card-text fw-bolder\">Sunset: ${new Date(day.sunset*1000).getHours()}:${new Date(day.sunset*1000).getMinutes().toString().padStart(2, \"0\")} PM</p>\n            </div>\n            </div>\n            `;\n\n                let div = document.createElement(\"div\");\n                div.classList.add(\"swiper-slide\");\n                div.innerHTML = weatherCard;\n                document.getElementById(\"swiper-wrapper\").append(div);\n\n            }\n\n\n\n        }).then(() => {\n            const swiper2 = new Swiper(\".swiper-container\", {\n                // Optional parameters\n                slidesPerView: \"auto\",\n                spaceBetween: 5,\n                direction: \"horizontal\",\n                loop: true,\n                speed: 600,\n                // breakpoints: {\n                //     320: {\n                //         slidesPerView: 1,\n                //         spaceBetween: 0\n                //     },\n                //     480: {\n                //         slidesPerView: 1,\n                //         spaceBetween: 0\n                //     },\n                //     900: {\n                //         slidesPerView: 1,\n                //         spaceBetween: 0\n                //     }\n\n                // },\n                pagination: {\n                    el: \".swiper-pagination\",\n                    clickable: true\n                },\n\n                navigation: {\n                    nextEl: \".swiper-button-next\",\n                    prevEl: \".swiper-button-prev\"\n                }\n            });\n\n        })\n        .catch(error => {\n            // Handle any errors that occurred during the fetch request\n            console.log('Error:', error);\n        });\n\n\n\n\n}\n\n\nupdateWeather(\"55.8642\", \"-4.2518\");\n\n\n\nconst autocompleteService = new google.maps.places.AutocompleteService();\n\nconst placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\nfunction getCityDetails(placeId) {\n    placesService.getDetails({\n        placeId\n    }, (place, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n            console.log('Selected city:', place.name);\n            console.log(place.geometry.location.lng())\n            updateWeather(place.geometry.location.lat(), place.geometry.location.lng());\n            document.querySelector(\"#city\").innerHTML = place.name;\n        }\n    });\n}\n\nconst cityInput = document.getElementById('city-input');\ncityInput.addEventListener('input', () => {\n    const inputText = cityInput.value;\n    autocompleteService.getPlacePredictions({\n            input: inputText,\n            types: ['(cities)']\n        },\n        (predictions, status) => {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n\n                showAutocompleteResults(predictions);\n            }\n        }\n    );\n});\n\n\nfunction showAutocompleteResults(predictions) {\n    const autocompleteList = document.getElementById('autocomplete-list');\n    autocompleteList.innerHTML = '';\n\n    predictions.forEach(prediction => {\n        const listItem = document.createElement('li');\n        listItem.textContent = prediction.description;\n        listItem.classList.add('list-group-item');\n\n        listItem.addEventListener('click', () => {\n            cityInput.value = prediction.description;\n            getCityDetails(prediction.place_id);\n            autocompleteList.style.display = 'none';\n        });\n\n\n        listItem.addEventListener('mouseenter', () => {\n            listItem.classList.add('active');\n        });\n\n        listItem.addEventListener('mouseleave', () => {\n            listItem.classList.remove('active');\n        });\n\n        autocompleteList.appendChild(listItem);\n    });\n\n    autocompleteList.style.display = predictions.length > 0 ? 'block' : 'none';\n}"],"names":["$6380158de65e3a86$var$updateWeather","lat","lng","fetch","then","response","json","data","console","log","alerts","current","daily","hourly","document","getElementById","innerHTML","day","date","Date","dt","dateString","getDate","toString","getMonth","icon","description","weather","weatherCard","toLocaleString","weekday","parseInt","temp","max","humidity","feels_like","wind_speed","sunrise","getHours","getMinutes","padStart","sunset","div","createElement","classList","add","append","Swiper","slidesPerView","spaceBetween","direction","loop","speed","pagination","el","clickable","navigation","nextEl","prevEl","catch","error","$6380158de65e3a86$var$autocompleteService","google","maps","places","AutocompleteService","$6380158de65e3a86$var$placesService","PlacesService","$6380158de65e3a86$var$cityInput","addEventListener","inputText","value","getPlacePredictions","input","types","predictions","status","PlacesServiceStatus","OK","autocompleteList","forEach","prediction","listItem","textContent","placeId","place_id","getDetails","place","name","geometry","location","querySelector","style","display","remove","appendChild","length","$6380158de65e3a86$var$showAutocompleteResults"],"version":3,"file":"weather-widget.60b7f15a.js.map"}